// Gerado por GNU Bison 3.8.2.
// Relate erros para <bug-bison@gnu.org>.
// Site: <https://www.gnu.org/software/bison/>.

digraph "adpp_parser.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="Estado 0\n\l  0 $accept: • program $end\l"]
  0 -> 1 [style=solid label="PROGRAM"]
  0 -> 2 [style=dashed label="program"]
  1 [label="Estado 1\n\l  1 program: PROGRAM • ID '{' stmts '}'\l"]
  1 -> 3 [style=solid label="ID"]
  2 [label="Estado 2\n\l  0 $accept: program • $end\l"]
  2 -> 4 [style=solid label="$end"]
  3 [label="Estado 3\n\l  1 program: PROGRAM ID • '{' stmts '}'\l"]
  3 -> 5 [style=solid label="'{'"]
  4 [label="Estado 4\n\l  0 $accept: program $end •\l"]
  4 -> "4R0" [style=solid]
 "4R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  5 [label="Estado 5\n\l  1 program: PROGRAM ID '{' • stmts '}'\l"]
  5 -> 6 [style=solid label="ID"]
  5 -> 7 [style=solid label="PRIMITIVE"]
  5 -> 8 [style=solid label="ARRAY"]
  5 -> 9 [style=solid label="INTEGER"]
  5 -> 10 [style=solid label="CARACTERE"]
  5 -> 11 [style=solid label="DOUBLE"]
  5 -> 12 [style=solid label="STRING"]
  5 -> 13 [style=solid label="SUBPROGRAM"]
  5 -> 14 [style=solid label="IF"]
  5 -> 15 [style=solid label="FOR"]
  5 -> 16 [style=solid label="RETURN"]
  5 -> 17 [style=solid label="';'"]
  5 -> 18 [style=dashed label="stmts"]
  5 -> 19 [style=dashed label="type"]
  5 -> 20 [style=dashed label="func_def"]
  5 -> 21 [style=dashed label="expression"]
  5 -> 22 [style=dashed label="access"]
  5 -> 23 [style=dashed label="literal"]
  5 -> 24 [style=dashed label="func_call"]
  5 -> 25 [style=dashed label="binary_expr"]
  5 -> 26 [style=dashed label="stmt"]
  5 -> 27 [style=dashed label="declaration"]
  5 -> 28 [style=dashed label="atrib"]
  5 -> 29 [style=dashed label="if_stmt"]
  5 -> 30 [style=dashed label="for_stmt"]
  5 -> 31 [style=dashed label="return_stmt"]
  6 [label="Estado 6\n\l 11 expression: ID •\l 16 access: ID • '[' expression ']'\l 21 func_call: ID • '(' args ')'\l 51 atrib: ID • '=' expression\l 52      | ID • INCREMENT\l 53      | ID • DECREMENT\l"]
  6 -> 32 [style=solid label="INCREMENT"]
  6 -> 33 [style=solid label="DECREMENT"]
  6 -> 34 [style=solid label="'('"]
  6 -> 35 [style=solid label="'['"]
  6 -> 36 [style=solid label="'='"]
  6 -> "6R11" [style=solid]
 "6R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  7 [label="Estado 7\n\l  4 type: PRIMITIVE •\l"]
  7 -> "7R4" [style=solid]
 "7R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  8 [label="Estado 8\n\l  5 type: ARRAY • LESS_THAN PRIMITIVE MORE_THAN\l"]
  8 -> 37 [style=solid label="LESS_THAN"]
  9 [label="Estado 9\n\l 17 literal: INTEGER •\l"]
  9 -> "9R17" [style=solid]
 "9R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  10 [label="Estado 10\n\l 19 literal: CARACTERE •\l"]
  10 -> "10R19" [style=solid]
 "10R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  11 [label="Estado 11\n\l 18 literal: DOUBLE •\l"]
  11 -> "11R18" [style=solid]
 "11R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  12 [label="Estado 12\n\l 20 literal: STRING •\l"]
  12 -> "12R20" [style=solid]
 "12R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  13 [label="Estado 13\n\l  6 func_def: SUBPROGRAM • ID '(' params ')' ':' type block\l"]
  13 -> 38 [style=solid label="ID"]
  14 [label="Estado 14\n\l 54 if_stmt: IF • '(' expression ')' block\l 55        | IF • '(' expression ')' block ELSE block\l"]
  14 -> 39 [style=solid label="'('"]
  15 [label="Estado 15\n\l 56 for_stmt: FOR • '(' for_part ';' expression ';' for_part ')' block\l"]
  15 -> 40 [style=solid label="'('"]
  16 [label="Estado 16\n\l 59 return_stmt: RETURN • expression\l"]
  16 -> 41 [style=solid label="ID"]
  16 -> 9 [style=solid label="INTEGER"]
  16 -> 10 [style=solid label="CARACTERE"]
  16 -> 11 [style=solid label="DOUBLE"]
  16 -> 12 [style=solid label="STRING"]
  16 -> 42 [style=dashed label="expression"]
  16 -> 22 [style=dashed label="access"]
  16 -> 23 [style=dashed label="literal"]
  16 -> 24 [style=dashed label="func_call"]
  16 -> 25 [style=dashed label="binary_expr"]
  17 [label="Estado 17\n\l 41 stmt: ';' •\l"]
  17 -> "17R41" [style=solid]
 "17R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  18 [label="Estado 18\n\l  1 program: PROGRAM ID '{' stmts • '}'\l"]
  18 -> 43 [style=solid label="'}'"]
  19 [label="Estado 19\n\l 49 declaration: type • atrib\l 50            | type • ID\l"]
  19 -> 44 [style=solid label="ID"]
  19 -> 45 [style=dashed label="atrib"]
  20 [label="Estado 20\n\l 42 stmt: func_def •\l"]
  20 -> "20R42" [style=solid]
 "20R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  21 [label="Estado 21\n\l 25 binary_expr: expression • binary_operator expression\l 43 stmt: expression • ';'\l"]
  21 -> 46 [style=solid label="COMPARISON"]
  21 -> 47 [style=solid label="DIFFERENT"]
  21 -> 48 [style=solid label="LESS_THAN"]
  21 -> 49 [style=solid label="MORE_THAN"]
  21 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  21 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  21 -> 52 [style=solid label="PLUS"]
  21 -> 53 [style=solid label="MINUS"]
  21 -> 54 [style=solid label="POWER"]
  21 -> 55 [style=solid label="TIMES"]
  21 -> 56 [style=solid label="SPLIT"]
  21 -> 57 [style=solid label="MOD"]
  21 -> 58 [style=solid label="AND"]
  21 -> 59 [style=solid label="OR"]
  21 -> 60 [style=solid label="';'"]
  21 -> 61 [style=dashed label="binary_operator"]
  21 -> 62 [style=dashed label="boolean_operator"]
  22 [label="Estado 22\n\l 15 expression: access •\l"]
  22 -> "22R15" [style=solid]
 "22R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  23 [label="Estado 23\n\l 12 expression: literal •\l"]
  23 -> "23R12" [style=solid]
 "23R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  24 [label="Estado 24\n\l 13 expression: func_call •\l"]
  24 -> "24R13" [style=solid]
 "24R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  25 [label="Estado 25\n\l 14 expression: binary_expr •\l"]
  25 -> "25R14" [style=solid]
 "25R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  26 [label="Estado 26\n\l  2 stmts: stmt •\l  3      | stmt • stmts\l"]
  26 -> 6 [style=solid label="ID"]
  26 -> 7 [style=solid label="PRIMITIVE"]
  26 -> 8 [style=solid label="ARRAY"]
  26 -> 9 [style=solid label="INTEGER"]
  26 -> 10 [style=solid label="CARACTERE"]
  26 -> 11 [style=solid label="DOUBLE"]
  26 -> 12 [style=solid label="STRING"]
  26 -> 13 [style=solid label="SUBPROGRAM"]
  26 -> 14 [style=solid label="IF"]
  26 -> 15 [style=solid label="FOR"]
  26 -> 16 [style=solid label="RETURN"]
  26 -> 17 [style=solid label="';'"]
  26 -> 63 [style=dashed label="stmts"]
  26 -> 19 [style=dashed label="type"]
  26 -> 20 [style=dashed label="func_def"]
  26 -> 21 [style=dashed label="expression"]
  26 -> 22 [style=dashed label="access"]
  26 -> 23 [style=dashed label="literal"]
  26 -> 24 [style=dashed label="func_call"]
  26 -> 25 [style=dashed label="binary_expr"]
  26 -> 26 [style=dashed label="stmt"]
  26 -> 27 [style=dashed label="declaration"]
  26 -> 28 [style=dashed label="atrib"]
  26 -> 29 [style=dashed label="if_stmt"]
  26 -> 30 [style=dashed label="for_stmt"]
  26 -> 31 [style=dashed label="return_stmt"]
  26 -> "26R2" [style=solid]
 "26R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  27 [label="Estado 27\n\l 48 stmt: declaration • ';'\l"]
  27 -> 64 [style=solid label="';'"]
  28 [label="Estado 28\n\l 47 stmt: atrib • ';'\l"]
  28 -> 65 [style=solid label="';'"]
  29 [label="Estado 29\n\l 44 stmt: if_stmt •\l"]
  29 -> "29R44" [style=solid]
 "29R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  30 [label="Estado 30\n\l 45 stmt: for_stmt •\l"]
  30 -> "30R45" [style=solid]
 "30R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  31 [label="Estado 31\n\l 46 stmt: return_stmt • ';'\l"]
  31 -> 66 [style=solid label="';'"]
  32 [label="Estado 32\n\l 52 atrib: ID INCREMENT •\l"]
  32 -> "32R52" [style=solid]
 "32R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  33 [label="Estado 33\n\l 53 atrib: ID DECREMENT •\l"]
  33 -> "33R53" [style=solid]
 "33R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  34 [label="Estado 34\n\l 21 func_call: ID '(' • args ')'\l"]
  34 -> 41 [style=solid label="ID"]
  34 -> 9 [style=solid label="INTEGER"]
  34 -> 10 [style=solid label="CARACTERE"]
  34 -> 11 [style=solid label="DOUBLE"]
  34 -> 12 [style=solid label="STRING"]
  34 -> 67 [style=dashed label="expression"]
  34 -> 22 [style=dashed label="access"]
  34 -> 23 [style=dashed label="literal"]
  34 -> 24 [style=dashed label="func_call"]
  34 -> 68 [style=dashed label="args"]
  34 -> 69 [style=dashed label="expressions"]
  34 -> 25 [style=dashed label="binary_expr"]
  35 [label="Estado 35\n\l 16 access: ID '[' • expression ']'\l"]
  35 -> 41 [style=solid label="ID"]
  35 -> 9 [style=solid label="INTEGER"]
  35 -> 10 [style=solid label="CARACTERE"]
  35 -> 11 [style=solid label="DOUBLE"]
  35 -> 12 [style=solid label="STRING"]
  35 -> 70 [style=dashed label="expression"]
  35 -> 22 [style=dashed label="access"]
  35 -> 23 [style=dashed label="literal"]
  35 -> 24 [style=dashed label="func_call"]
  35 -> 25 [style=dashed label="binary_expr"]
  36 [label="Estado 36\n\l 51 atrib: ID '=' • expression\l"]
  36 -> 41 [style=solid label="ID"]
  36 -> 9 [style=solid label="INTEGER"]
  36 -> 10 [style=solid label="CARACTERE"]
  36 -> 11 [style=solid label="DOUBLE"]
  36 -> 12 [style=solid label="STRING"]
  36 -> 71 [style=dashed label="expression"]
  36 -> 22 [style=dashed label="access"]
  36 -> 23 [style=dashed label="literal"]
  36 -> 24 [style=dashed label="func_call"]
  36 -> 25 [style=dashed label="binary_expr"]
  37 [label="Estado 37\n\l  5 type: ARRAY LESS_THAN • PRIMITIVE MORE_THAN\l"]
  37 -> 72 [style=solid label="PRIMITIVE"]
  38 [label="Estado 38\n\l  6 func_def: SUBPROGRAM ID • '(' params ')' ':' type block\l"]
  38 -> 73 [style=solid label="'('"]
  39 [label="Estado 39\n\l 54 if_stmt: IF '(' • expression ')' block\l 55        | IF '(' • expression ')' block ELSE block\l"]
  39 -> 41 [style=solid label="ID"]
  39 -> 9 [style=solid label="INTEGER"]
  39 -> 10 [style=solid label="CARACTERE"]
  39 -> 11 [style=solid label="DOUBLE"]
  39 -> 12 [style=solid label="STRING"]
  39 -> 74 [style=dashed label="expression"]
  39 -> 22 [style=dashed label="access"]
  39 -> 23 [style=dashed label="literal"]
  39 -> 24 [style=dashed label="func_call"]
  39 -> 25 [style=dashed label="binary_expr"]
  40 [label="Estado 40\n\l 56 for_stmt: FOR '(' • for_part ';' expression ';' for_part ')' block\l"]
  40 -> 75 [style=solid label="ID"]
  40 -> 7 [style=solid label="PRIMITIVE"]
  40 -> 8 [style=solid label="ARRAY"]
  40 -> 19 [style=dashed label="type"]
  40 -> 76 [style=dashed label="declaration"]
  40 -> 77 [style=dashed label="atrib"]
  40 -> 78 [style=dashed label="for_part"]
  41 [label="Estado 41\n\l 11 expression: ID •\l 16 access: ID • '[' expression ']'\l 21 func_call: ID • '(' args ')'\l"]
  41 -> 34 [style=solid label="'('"]
  41 -> 35 [style=solid label="'['"]
  41 -> "41R11" [style=solid]
 "41R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  42 [label="Estado 42\n\l 25 binary_expr: expression • binary_operator expression\l 59 return_stmt: RETURN expression •\l"]
  42 -> 46 [style=solid label="COMPARISON"]
  42 -> 47 [style=solid label="DIFFERENT"]
  42 -> 48 [style=solid label="LESS_THAN"]
  42 -> 49 [style=solid label="MORE_THAN"]
  42 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  42 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  42 -> 52 [style=solid label="PLUS"]
  42 -> 53 [style=solid label="MINUS"]
  42 -> 54 [style=solid label="POWER"]
  42 -> 55 [style=solid label="TIMES"]
  42 -> 56 [style=solid label="SPLIT"]
  42 -> 57 [style=solid label="MOD"]
  42 -> 58 [style=solid label="AND"]
  42 -> 59 [style=solid label="OR"]
  42 -> 61 [style=dashed label="binary_operator"]
  42 -> 62 [style=dashed label="boolean_operator"]
  42 -> "42R59" [style=solid]
 "42R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  43 [label="Estado 43\n\l  1 program: PROGRAM ID '{' stmts '}' •\l"]
  43 -> "43R1" [style=solid]
 "43R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  44 [label="Estado 44\n\l 50 declaration: type ID •\l 51 atrib: ID • '=' expression\l 52      | ID • INCREMENT\l 53      | ID • DECREMENT\l"]
  44 -> 32 [style=solid label="INCREMENT"]
  44 -> 33 [style=solid label="DECREMENT"]
  44 -> 36 [style=solid label="'='"]
  44 -> "44R50" [style=solid]
 "44R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  45 [label="Estado 45\n\l 49 declaration: type atrib •\l"]
  45 -> "45R49" [style=solid]
 "45R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  46 [label="Estado 46\n\l 33 boolean_operator: COMPARISON •\l"]
  46 -> "46R33" [style=solid]
 "46R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  47 [label="Estado 47\n\l 34 boolean_operator: DIFFERENT •\l"]
  47 -> "47R34" [style=solid]
 "47R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  48 [label="Estado 48\n\l 35 boolean_operator: LESS_THAN •\l"]
  48 -> "48R35" [style=solid]
 "48R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  49 [label="Estado 49\n\l 36 boolean_operator: MORE_THAN •\l"]
  49 -> "49R36" [style=solid]
 "49R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  50 [label="Estado 50\n\l 37 boolean_operator: LESS_THAN_EQUALS •\l"]
  50 -> "50R37" [style=solid]
 "50R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  51 [label="Estado 51\n\l 38 boolean_operator: MORE_THAN_EQUALS •\l"]
  51 -> "51R38" [style=solid]
 "51R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  52 [label="Estado 52\n\l 27 binary_operator: PLUS •\l"]
  52 -> "52R27" [style=solid]
 "52R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  53 [label="Estado 53\n\l 28 binary_operator: MINUS •\l"]
  53 -> "53R28" [style=solid]
 "53R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  54 [label="Estado 54\n\l 29 binary_operator: POWER •\l"]
  54 -> "54R29" [style=solid]
 "54R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  55 [label="Estado 55\n\l 30 binary_operator: TIMES •\l"]
  55 -> "55R30" [style=solid]
 "55R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  56 [label="Estado 56\n\l 31 binary_operator: SPLIT •\l"]
  56 -> "56R31" [style=solid]
 "56R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  57 [label="Estado 57\n\l 32 binary_operator: MOD •\l"]
  57 -> "57R32" [style=solid]
 "57R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  58 [label="Estado 58\n\l 39 boolean_operator: AND •\l"]
  58 -> "58R39" [style=solid]
 "58R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  59 [label="Estado 59\n\l 40 boolean_operator: OR •\l"]
  59 -> "59R40" [style=solid]
 "59R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  60 [label="Estado 60\n\l 43 stmt: expression ';' •\l"]
  60 -> "60R43" [style=solid]
 "60R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  61 [label="Estado 61\n\l 25 binary_expr: expression binary_operator • expression\l"]
  61 -> 41 [style=solid label="ID"]
  61 -> 9 [style=solid label="INTEGER"]
  61 -> 10 [style=solid label="CARACTERE"]
  61 -> 11 [style=solid label="DOUBLE"]
  61 -> 12 [style=solid label="STRING"]
  61 -> 79 [style=dashed label="expression"]
  61 -> 22 [style=dashed label="access"]
  61 -> 23 [style=dashed label="literal"]
  61 -> 24 [style=dashed label="func_call"]
  61 -> 25 [style=dashed label="binary_expr"]
  62 [label="Estado 62\n\l 26 binary_operator: boolean_operator •\l"]
  62 -> "62R26" [style=solid]
 "62R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  63 [label="Estado 63\n\l  3 stmts: stmt stmts •\l"]
  63 -> "63R3" [style=solid]
 "63R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  64 [label="Estado 64\n\l 48 stmt: declaration ';' •\l"]
  64 -> "64R48" [style=solid]
 "64R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  65 [label="Estado 65\n\l 47 stmt: atrib ';' •\l"]
  65 -> "65R47" [style=solid]
 "65R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  66 [label="Estado 66\n\l 46 stmt: return_stmt ';' •\l"]
  66 -> "66R46" [style=solid]
 "66R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  67 [label="Estado 67\n\l 23 expressions: expression •\l 24            | expression • ',' expressions\l 25 binary_expr: expression • binary_operator expression\l"]
  67 -> 46 [style=solid label="COMPARISON"]
  67 -> 47 [style=solid label="DIFFERENT"]
  67 -> 48 [style=solid label="LESS_THAN"]
  67 -> 49 [style=solid label="MORE_THAN"]
  67 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  67 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  67 -> 52 [style=solid label="PLUS"]
  67 -> 53 [style=solid label="MINUS"]
  67 -> 54 [style=solid label="POWER"]
  67 -> 55 [style=solid label="TIMES"]
  67 -> 56 [style=solid label="SPLIT"]
  67 -> 57 [style=solid label="MOD"]
  67 -> 58 [style=solid label="AND"]
  67 -> 59 [style=solid label="OR"]
  67 -> 80 [style=solid label="','"]
  67 -> 61 [style=dashed label="binary_operator"]
  67 -> 62 [style=dashed label="boolean_operator"]
  67 -> "67R23" [style=solid]
 "67R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  68 [label="Estado 68\n\l 21 func_call: ID '(' args • ')'\l"]
  68 -> 81 [style=solid label="')'"]
  69 [label="Estado 69\n\l 22 args: expressions •\l"]
  69 -> "69R22" [style=solid]
 "69R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  70 [label="Estado 70\n\l 16 access: ID '[' expression • ']'\l 25 binary_expr: expression • binary_operator expression\l"]
  70 -> 46 [style=solid label="COMPARISON"]
  70 -> 47 [style=solid label="DIFFERENT"]
  70 -> 48 [style=solid label="LESS_THAN"]
  70 -> 49 [style=solid label="MORE_THAN"]
  70 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  70 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  70 -> 52 [style=solid label="PLUS"]
  70 -> 53 [style=solid label="MINUS"]
  70 -> 54 [style=solid label="POWER"]
  70 -> 55 [style=solid label="TIMES"]
  70 -> 56 [style=solid label="SPLIT"]
  70 -> 57 [style=solid label="MOD"]
  70 -> 58 [style=solid label="AND"]
  70 -> 59 [style=solid label="OR"]
  70 -> 82 [style=solid label="']'"]
  70 -> 61 [style=dashed label="binary_operator"]
  70 -> 62 [style=dashed label="boolean_operator"]
  71 [label="Estado 71\n\l 25 binary_expr: expression • binary_operator expression\l 51 atrib: ID '=' expression •\l"]
  71 -> 46 [style=solid label="COMPARISON"]
  71 -> 47 [style=solid label="DIFFERENT"]
  71 -> 48 [style=solid label="LESS_THAN"]
  71 -> 49 [style=solid label="MORE_THAN"]
  71 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  71 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  71 -> 52 [style=solid label="PLUS"]
  71 -> 53 [style=solid label="MINUS"]
  71 -> 54 [style=solid label="POWER"]
  71 -> 55 [style=solid label="TIMES"]
  71 -> 56 [style=solid label="SPLIT"]
  71 -> 57 [style=solid label="MOD"]
  71 -> 58 [style=solid label="AND"]
  71 -> 59 [style=solid label="OR"]
  71 -> 61 [style=dashed label="binary_operator"]
  71 -> 62 [style=dashed label="boolean_operator"]
  71 -> "71R51" [style=solid]
 "71R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  72 [label="Estado 72\n\l  5 type: ARRAY LESS_THAN PRIMITIVE • MORE_THAN\l"]
  72 -> 83 [style=solid label="MORE_THAN"]
  73 [label="Estado 73\n\l  6 func_def: SUBPROGRAM ID '(' • params ')' ':' type block\l"]
  73 -> 7 [style=solid label="PRIMITIVE"]
  73 -> 8 [style=solid label="ARRAY"]
  73 -> 84 [style=dashed label="type"]
  73 -> 85 [style=dashed label="params"]
  73 -> 86 [style=dashed label="param"]
  74 [label="Estado 74\n\l 25 binary_expr: expression • binary_operator expression\l 54 if_stmt: IF '(' expression • ')' block\l 55        | IF '(' expression • ')' block ELSE block\l"]
  74 -> 46 [style=solid label="COMPARISON"]
  74 -> 47 [style=solid label="DIFFERENT"]
  74 -> 48 [style=solid label="LESS_THAN"]
  74 -> 49 [style=solid label="MORE_THAN"]
  74 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  74 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  74 -> 52 [style=solid label="PLUS"]
  74 -> 53 [style=solid label="MINUS"]
  74 -> 54 [style=solid label="POWER"]
  74 -> 55 [style=solid label="TIMES"]
  74 -> 56 [style=solid label="SPLIT"]
  74 -> 57 [style=solid label="MOD"]
  74 -> 58 [style=solid label="AND"]
  74 -> 59 [style=solid label="OR"]
  74 -> 87 [style=solid label="')'"]
  74 -> 61 [style=dashed label="binary_operator"]
  74 -> 62 [style=dashed label="boolean_operator"]
  75 [label="Estado 75\n\l 51 atrib: ID • '=' expression\l 52      | ID • INCREMENT\l 53      | ID • DECREMENT\l"]
  75 -> 32 [style=solid label="INCREMENT"]
  75 -> 33 [style=solid label="DECREMENT"]
  75 -> 36 [style=solid label="'='"]
  76 [label="Estado 76\n\l 58 for_part: declaration •\l"]
  76 -> "76R58" [style=solid]
 "76R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  77 [label="Estado 77\n\l 57 for_part: atrib •\l"]
  77 -> "77R57" [style=solid]
 "77R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  78 [label="Estado 78\n\l 56 for_stmt: FOR '(' for_part • ';' expression ';' for_part ')' block\l"]
  78 -> 88 [style=solid label="';'"]
  79 [label="Estado 79\n\l 25 binary_expr: expression • binary_operator expression\l 25            | expression binary_operator expression •\l"]
  79 -> 46 [style=solid label="COMPARISON"]
  79 -> 47 [style=solid label="DIFFERENT"]
  79 -> 48 [style=solid label="LESS_THAN"]
  79 -> 49 [style=solid label="MORE_THAN"]
  79 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  79 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  79 -> 52 [style=solid label="PLUS"]
  79 -> 53 [style=solid label="MINUS"]
  79 -> 54 [style=solid label="POWER"]
  79 -> 55 [style=solid label="TIMES"]
  79 -> 56 [style=solid label="SPLIT"]
  79 -> 57 [style=solid label="MOD"]
  79 -> 58 [style=solid label="AND"]
  79 -> 59 [style=solid label="OR"]
  79 -> 61 [style=dashed label="binary_operator"]
  79 -> 62 [style=dashed label="boolean_operator"]
  79 -> "79R25d" [label="[COMPARISON, DIFFERENT, LESS_THAN, MORE_THAN, LESS_THAN_EQUALS, MORE_THAN_EQUALS, PLUS, MINUS, POWER, TIMES, SPLIT, MOD, AND, OR]", style=solid]
 "79R25d" [label="R25", fillcolor=5, shape=diamond, style=filled]
  79 -> "79R25" [style=solid]
 "79R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  80 [label="Estado 80\n\l 24 expressions: expression ',' • expressions\l"]
  80 -> 41 [style=solid label="ID"]
  80 -> 9 [style=solid label="INTEGER"]
  80 -> 10 [style=solid label="CARACTERE"]
  80 -> 11 [style=solid label="DOUBLE"]
  80 -> 12 [style=solid label="STRING"]
  80 -> 67 [style=dashed label="expression"]
  80 -> 22 [style=dashed label="access"]
  80 -> 23 [style=dashed label="literal"]
  80 -> 24 [style=dashed label="func_call"]
  80 -> 89 [style=dashed label="expressions"]
  80 -> 25 [style=dashed label="binary_expr"]
  81 [label="Estado 81\n\l 21 func_call: ID '(' args ')' •\l"]
  81 -> "81R21" [style=solid]
 "81R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  82 [label="Estado 82\n\l 16 access: ID '[' expression ']' •\l"]
  82 -> "82R16" [style=solid]
 "82R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  83 [label="Estado 83\n\l  5 type: ARRAY LESS_THAN PRIMITIVE MORE_THAN •\l"]
  83 -> "83R5" [style=solid]
 "83R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  84 [label="Estado 84\n\l  9 param: type • ID\l"]
  84 -> 90 [style=solid label="ID"]
  85 [label="Estado 85\n\l  6 func_def: SUBPROGRAM ID '(' params • ')' ':' type block\l"]
  85 -> 91 [style=solid label="')'"]
  86 [label="Estado 86\n\l  7 params: param •\l  8       | param • ',' params\l"]
  86 -> 92 [style=solid label="','"]
  86 -> "86R7" [style=solid]
 "86R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  87 [label="Estado 87\n\l 54 if_stmt: IF '(' expression ')' • block\l 55        | IF '(' expression ')' • block ELSE block\l"]
  87 -> 93 [style=solid label="'{'"]
  87 -> 94 [style=dashed label="block"]
  88 [label="Estado 88\n\l 56 for_stmt: FOR '(' for_part ';' • expression ';' for_part ')' block\l"]
  88 -> 41 [style=solid label="ID"]
  88 -> 9 [style=solid label="INTEGER"]
  88 -> 10 [style=solid label="CARACTERE"]
  88 -> 11 [style=solid label="DOUBLE"]
  88 -> 12 [style=solid label="STRING"]
  88 -> 95 [style=dashed label="expression"]
  88 -> 22 [style=dashed label="access"]
  88 -> 23 [style=dashed label="literal"]
  88 -> 24 [style=dashed label="func_call"]
  88 -> 25 [style=dashed label="binary_expr"]
  89 [label="Estado 89\n\l 24 expressions: expression ',' expressions •\l"]
  89 -> "89R24" [style=solid]
 "89R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  90 [label="Estado 90\n\l  9 param: type ID •\l"]
  90 -> "90R9" [style=solid]
 "90R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  91 [label="Estado 91\n\l  6 func_def: SUBPROGRAM ID '(' params ')' • ':' type block\l"]
  91 -> 96 [style=solid label="':'"]
  92 [label="Estado 92\n\l  8 params: param ',' • params\l"]
  92 -> 7 [style=solid label="PRIMITIVE"]
  92 -> 8 [style=solid label="ARRAY"]
  92 -> 84 [style=dashed label="type"]
  92 -> 97 [style=dashed label="params"]
  92 -> 86 [style=dashed label="param"]
  93 [label="Estado 93\n\l 10 block: '{' • stmts '}'\l"]
  93 -> 6 [style=solid label="ID"]
  93 -> 7 [style=solid label="PRIMITIVE"]
  93 -> 8 [style=solid label="ARRAY"]
  93 -> 9 [style=solid label="INTEGER"]
  93 -> 10 [style=solid label="CARACTERE"]
  93 -> 11 [style=solid label="DOUBLE"]
  93 -> 12 [style=solid label="STRING"]
  93 -> 13 [style=solid label="SUBPROGRAM"]
  93 -> 14 [style=solid label="IF"]
  93 -> 15 [style=solid label="FOR"]
  93 -> 16 [style=solid label="RETURN"]
  93 -> 17 [style=solid label="';'"]
  93 -> 98 [style=dashed label="stmts"]
  93 -> 19 [style=dashed label="type"]
  93 -> 20 [style=dashed label="func_def"]
  93 -> 21 [style=dashed label="expression"]
  93 -> 22 [style=dashed label="access"]
  93 -> 23 [style=dashed label="literal"]
  93 -> 24 [style=dashed label="func_call"]
  93 -> 25 [style=dashed label="binary_expr"]
  93 -> 26 [style=dashed label="stmt"]
  93 -> 27 [style=dashed label="declaration"]
  93 -> 28 [style=dashed label="atrib"]
  93 -> 29 [style=dashed label="if_stmt"]
  93 -> 30 [style=dashed label="for_stmt"]
  93 -> 31 [style=dashed label="return_stmt"]
  94 [label="Estado 94\n\l 54 if_stmt: IF '(' expression ')' block •\l 55        | IF '(' expression ')' block • ELSE block\l"]
  94 -> 99 [style=solid label="ELSE"]
  94 -> "94R54" [style=solid]
 "94R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  95 [label="Estado 95\n\l 25 binary_expr: expression • binary_operator expression\l 56 for_stmt: FOR '(' for_part ';' expression • ';' for_part ')' block\l"]
  95 -> 46 [style=solid label="COMPARISON"]
  95 -> 47 [style=solid label="DIFFERENT"]
  95 -> 48 [style=solid label="LESS_THAN"]
  95 -> 49 [style=solid label="MORE_THAN"]
  95 -> 50 [style=solid label="LESS_THAN_EQUALS"]
  95 -> 51 [style=solid label="MORE_THAN_EQUALS"]
  95 -> 52 [style=solid label="PLUS"]
  95 -> 53 [style=solid label="MINUS"]
  95 -> 54 [style=solid label="POWER"]
  95 -> 55 [style=solid label="TIMES"]
  95 -> 56 [style=solid label="SPLIT"]
  95 -> 57 [style=solid label="MOD"]
  95 -> 58 [style=solid label="AND"]
  95 -> 59 [style=solid label="OR"]
  95 -> 100 [style=solid label="';'"]
  95 -> 61 [style=dashed label="binary_operator"]
  95 -> 62 [style=dashed label="boolean_operator"]
  96 [label="Estado 96\n\l  6 func_def: SUBPROGRAM ID '(' params ')' ':' • type block\l"]
  96 -> 7 [style=solid label="PRIMITIVE"]
  96 -> 8 [style=solid label="ARRAY"]
  96 -> 101 [style=dashed label="type"]
  97 [label="Estado 97\n\l  8 params: param ',' params •\l"]
  97 -> "97R8" [style=solid]
 "97R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  98 [label="Estado 98\n\l 10 block: '{' stmts • '}'\l"]
  98 -> 102 [style=solid label="'}'"]
  99 [label="Estado 99\n\l 55 if_stmt: IF '(' expression ')' block ELSE • block\l"]
  99 -> 93 [style=solid label="'{'"]
  99 -> 103 [style=dashed label="block"]
  100 [label="Estado 100\n\l 56 for_stmt: FOR '(' for_part ';' expression ';' • for_part ')' block\l"]
  100 -> 75 [style=solid label="ID"]
  100 -> 7 [style=solid label="PRIMITIVE"]
  100 -> 8 [style=solid label="ARRAY"]
  100 -> 19 [style=dashed label="type"]
  100 -> 76 [style=dashed label="declaration"]
  100 -> 77 [style=dashed label="atrib"]
  100 -> 104 [style=dashed label="for_part"]
  101 [label="Estado 101\n\l  6 func_def: SUBPROGRAM ID '(' params ')' ':' type • block\l"]
  101 -> 93 [style=solid label="'{'"]
  101 -> 105 [style=dashed label="block"]
  102 [label="Estado 102\n\l 10 block: '{' stmts '}' •\l"]
  102 -> "102R10" [style=solid]
 "102R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  103 [label="Estado 103\n\l 55 if_stmt: IF '(' expression ')' block ELSE block •\l"]
  103 -> "103R55" [style=solid]
 "103R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  104 [label="Estado 104\n\l 56 for_stmt: FOR '(' for_part ';' expression ';' for_part • ')' block\l"]
  104 -> 106 [style=solid label="')'"]
  105 [label="Estado 105\n\l  6 func_def: SUBPROGRAM ID '(' params ')' ':' type block •\l"]
  105 -> "105R6" [style=solid]
 "105R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  106 [label="Estado 106\n\l 56 for_stmt: FOR '(' for_part ';' expression ';' for_part ')' • block\l"]
  106 -> 93 [style=solid label="'{'"]
  106 -> 107 [style=dashed label="block"]
  107 [label="Estado 107\n\l 56 for_stmt: FOR '(' for_part ';' expression ';' for_part ')' block •\l"]
  107 -> "107R56" [style=solid]
 "107R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
}
